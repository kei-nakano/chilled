# circleciのバージョン
version: 2.1

jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          RAILS_ENV: test
          MYSQL_HOST: 127.0.0.1
          
      - image: circleci/mysql:5.7.28
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: sample_test
          
    # 並列実行するコンテナ数。無料プランでは1しか指定できない
    parallelism: 1
    
    # 作業ディレクトリを指定
    working_directory: ~/sample
    
    steps:
      # CI環境上のworking_directoryの場所にgitリポジトリをコピーする
      - checkout
      
      # テスト用
      - run: exit 1
      
      # 環境変数の展開
      - run: echo ${CUSTOM_ENV} | base64 --decode >> $BASH_ENV
      
      # circleci環境のパブリックIPを取得
      - run: 
          name: Get public IP
          command: | 
            IP=`curl -f -s ifconfig.me` 
            echo "export IP=${IP}" >> $BASH_ENV

      # AWS CLIインストール
      - run:  
          name: Install aws CLI   
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            
      # master.keyの生成
      - run: sudo echo ${MASTER_KEY} > ~/sample/config/master.key
      
      # bundlerのバージョン1.17.3へのアップデート
      - run:  
          name: Update bundler   
          command: |
            gem uninstall bundler
            gem install bundler -v 1.17.3
          
      # バージョン確認
      - run:
          name: Which bundler?
          command: bundle -v
      
      # bundle install高速化のため、キャッシュを利用
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      
      # gemのインストールを行う
      - run:
          name: gem install
          command: bundle install --jobs=4 --retry=3
          
      # キャッシュを保存する
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/.bundle
            
      # rubocopテスト
      - run:
          name: rubocop
          command: bundle exec rubocop
      
      # mysqlの起動待機
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      
      # DBセットアップ
      - run:
          name: Setting DB
          command: bundle exec rails db:schema:load --trace
      
      # capistranoのssh接続用秘密鍵の追加
      - add_ssh_keys:
          fingerprints:
            - "03:0e:cc:fb:6d:e0:d0:6f:31:5c:8b:e4:bd:8e:aa:b7"

      # 本番環境へのデプロイ
      - run:
          name: Capistrano deploy
          command: |
            # masterブランチ以外ではデプロイしない
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              exit 0
            fi
            
            # masterブランチの場合
            # デプロイ用の一時ルールをセキュリティグループに追加
            aws ec2 authorize-security-group-ingress --group-id ${AWS_SECURITY_GROUP_ID} --protocol tcp --port 22 --cidr ${IP}/32
            
            # セキュリティグループの変更を記録
            echo true > /tmp/authorize.sg 
            
            # ルール変更反映まで待機する
            sleep 5
            
            # capistranoによるデプロイ実行
            bundle exec cap production deploy    
     
      # デプロイ用の一時ルールをセキュリティグループから削除
      - run:
          name: Delete a temporary rule from security group 
          command: |
            if [ -f /tmp/authorize.sg ]; then
              aws ec2 revoke-security-group-ingress --group-id ${AWS_SECURITY_GROUP_ID} --protocol tcp --port 22 --cidr ${IP}/32
            fi
          when: always # デプロイ結果に関係なくセキュリティグループを戻すため
